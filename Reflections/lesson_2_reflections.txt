What happens when you initialize a repository? Why do you need to do it?

	Git creates .git folder and keeps all metadata about changes there, so we can go back to any commit any time. We need to do this to make git start to track our changes in the project we working on in this folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	it stays between repository and working directory. It is kind of a buffer in which we can work with our changes we made before we decide to commit them.

How can you use the staging area to make sure you have one commit per logical change?

	While changes are in staging area we can modify them. And during the commit we can choose what changes we commit and what changes we keep in staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When we have alternative changes that we are not sure will work in future. Or when we have different versions of the projects (i.e. different locales).
	Branches give us a chance to try alternative development of project with a possibility to reject changes or apply them to the main flaw of the project. Or even create new alternative project.

How do the diagrams help you visualize the branch structure?
	
	With diagrams we can see the whole structure of the git commits and understand the flow of the project development and commits history.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	We move all changes from one branch to another (not only last commit!). It is represented this way because we merge two branches and after this there is one new merged branch with all the commits from previous two.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Sometimes merging can be done automatically without any undesirable consiquences for the project and there is no need to spend time and efforts on manual revising of the code (or any other material). For example when different parts of the code were edited. But if same parts of the code were edited then manual interaction is necessary to resolve conflict(s). And git doesn't merge untill conflict is resolved.
