How did viewing a diff between two versions of a file help you see the bug that was introduced?

	- Camparing only code that was changed was easier to find bug.
	- You can see the difference in code and have picture of where your project is moving, how it is developed.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It gives flexibilty to project. It's becomming easier to move back to your previous stages and try to fix code or even go different way.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    This way project is better structured because you choose milestones of your project when and what to commit.
    But you can miss something and then you will have to go back far, if you didn't commit for a long time.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    GIT probably more concentrated on the changes, and less on physical structure, while others VCSs more connected to physical data.

How can you use the commands git log and git diff to view the history of files?

    I don't know.

How might using version control make you more confident to make changes that
could break something?

    Because you know for sure you can go back to any step (commit) any time.

Now that you have your workspace set up, what do you want to try using Git for?

    To start project and see the history of changes in it. Plus try different branches.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	
	It makes easier to look at the project in a big scope. It helps to navigate on time history of the project and see the whole picture of its development.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
	
	Pros: you choose when is it time to commit and previous commits are easy to understand, since you commited them when it was ready (for your opinion).
	Cons: you have to pay attention when to commit and may miss the time of commit if you resolve big issue.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	Depends on VCS orientation. If it's oriented more on coding then it is more convinient to save multiple files in one commit. If it is more oriented for Office content, like documents and pictures, then it is better to work with each file separetly.

How can you use the commands git log and git diff to view the history of files?

	git log - shows all commits one by one from first to last
	git diff - shows difference between two commits.

How might using version control make you more confident to make changes that could break something?

	Because we can go back to any commit we did before and see the difference or even start to work from this point!

Now that you have your workspace set up, what do you want to try using Git for?

	I want to start my own project in github!
